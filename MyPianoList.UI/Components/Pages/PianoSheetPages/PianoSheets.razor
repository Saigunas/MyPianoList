@page "/list"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid 
@using MyPianoList.Application.Interfaces
@using MyPianoList.Domain
@using MyPianoList.Infrastructure
@using MyPianoList.Infrastructure.DTOs
@rendermode InteractiveServer

@inject IPianoSheetService PianoSheetService
@inject IRatingService RatingService
@inject IStatusService StatusService
@inject AuthenticationStateProvider _authenticationStateProvider

<h3>Piano Sheet List</h3>

@if (PianoSheetList != null && PianoSheetList.Any())
{
    <p>Total Like/Dislike ratio @ratingRatio</p>
    <p>Top Like/Dislike ratio @maxRatingRatio</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Tags</th>
            <th>Current Rating</th>
            <AuthorizeView>
                <Authorized>
                <th>Add Your Rating</th>
                <th>Status</th>
                </Authorized>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach (var sheet in PianoSheetList)
        {
            <tr>
                <td>@sheet.Title</td>
                <td>@string.Join(", ", sheet.Tags)</td>
                <td>@sheet.CurrentRating</td>
                <AuthorizeView>
                    <Authorized>
                        <td>
                                <select @onchange="(e) => SubmitRating(sheet.Id, sheet.UserRating, e.Value)">
                                <option value="">--Select--</option>
                                @foreach (RatingType ratingType in Enum.GetValues(typeof(RatingType)))
                                {
                                    <option value="@ratingType" selected="@(sheet.UserRating?.RatingValue == ratingType)">@ratingType</option>
                                }
                            </select>
                        </td>
                        <td>
                                <select @onchange="(e) => SubmitStatus(sheet.Id, sheet.UserStatus, e.Value)">
                                <option value="">--Select--</option>
                                @foreach (SheetStatus status in Enum.GetValues(typeof(SheetStatus)))
                                {
                                        <option value="@status" selected="@(sheet.UserStatus?.SheetStatus == status)">@status</option>
                                }
                            </select>
                        </td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        }
    </tbody>
</table>
}
else
{
    <p><em>Loading...</em></p>
}
@code {
    [Parameter]
    public List<PianoSheetDetailsDto> PianoSheetList { get; set; } = new List<PianoSheetDetailsDto>();

    private string? userId = "";
    private double ratingRatio = 0;
    private double maxRatingRatio = 0;

    protected override async Task OnInitializedAsync()
    {
        userId = await getUserId();
        PianoSheetList = await PianoSheetService.GetAllWithDetails(userId);
        ratingRatio = await RatingService.GetTotalLikeDislikeRatioAsync();
        maxRatingRatio = await RatingService.GetMaxLikeDislikeRatioAsync();
    }

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    private async Task SubmitRating(int sheetId, Rating userCurrentRating, Object newValue)
    {
        bool isRatingSelected = Enum.TryParse<RatingType>(newValue.ToString(), out RatingType newRating);
        if (!isRatingSelected)
        {
            if (userCurrentRating != null)
            {
                await RatingService.RemoveByIdAsync(userCurrentRating.Id);
            }
            return;
        }

        if (userCurrentRating == null)
        {
            var rating = new Rating {
                    UserId = userId,
                    PianoSheetId = sheetId,
                    RatingValue = newRating
            };
            await RatingService.CreateAsync(rating);
            return;
        }

        userCurrentRating.RatingValue = newRating;
        await RatingService.UpdateAsync(userCurrentRating.Id, userCurrentRating);
    }

    private async Task SubmitStatus(int sheetId, Status userCurrentStatus, Object newValue)
    {

        bool isStatusSelected = Enum.TryParse<SheetStatus>(newValue.ToString(), out SheetStatus newStatus);
        if (!isStatusSelected)
        {
            if (userCurrentStatus != null)
            {
                await StatusService.RemoveByIdAsync(userCurrentStatus.Id);
            }
            return;
        }

        if (userCurrentStatus == null)
        {
            var status = new Status
                {
                    UserId = userId,
                    PianoSheetId = sheetId,
                    SheetStatus = newStatus
                };
            await StatusService.CreateAsync(status);
            return;
        }

        userCurrentStatus.SheetStatus = newStatus;
        await StatusService.UpdateAsync(userCurrentStatus.Id, userCurrentStatus);
    }
}