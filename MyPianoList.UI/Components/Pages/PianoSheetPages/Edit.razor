@page "/pianosheets/edit"
@using Microsoft.EntityFrameworkCore
@using MyPianoList.Application.Interfaces
@using MyPianoList.Infrastructure
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPianoList.Domain

@inject IPianoSheetService PianoSheetService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>PianoSheet</h2>
<hr />
@if (PianoSheet is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="PianoSheet" OnValidSubmit="UpdatePianoSheet" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="PianoSheet.Id" value="@PianoSheet.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="PianoSheet.Title" class="form-control" />
                    <ValidationMessage For="() => PianoSheet.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="composer" class="form-label">Composer:</label>
                    <InputText id="composer" @bind-Value="PianoSheet.Composer" class="form-control" />
                    <ValidationMessage For="() => PianoSheet.Composer" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="composer" class="form-label">URL (musescore or imslp):</label>
                    <InputText id="composer" @bind-Value="PianoSheet.Url" class="form-control" />
                    <ValidationMessage For="() => PianoSheet.Url" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/pianosheets">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private PianoSheet? PianoSheet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PianoSheet ??= await PianoSheetService.GetByIdAsync(Id);

        if (PianoSheet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePianoSheet()
    {    
        try
        {
            if (PianoSheet != null)
            {
                await PianoSheetService.UpdateAsync(Id, PianoSheet);
            }
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("notfound");
        }

        NavigationManager.NavigateTo("/pianosheets");
    }
}
